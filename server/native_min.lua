StartESX=function(a)ESX=exports["es_extended"]:getSharedObject()end;StartQB=function(a)QBCore=exports['qb-core']:GetCoreObject()end;ShowNotification=function(b,c,type)if GetResourceState("qb-core")=="started"then TriggerClientEvent('QBCore:Notify',b,c,type)elseif GetResourceState("es_extended")=="started"then TriggerClientEvent('esx:showNotification',b,c)end end;CreateLoop=function(d,e)Citizen.CreateThread(function()local f=true;_break=function()f=false end;while f do d()Citizen.Wait(e or 5)end end)end;AddItem=function(b,g,h,i,j)if ESX then xPlayer=ESX.GetPlayerFromId(b)xPlayer.addInventoryItem(g,h,i,j)else xPlayer=QBCore.Functions.GetPlayer(b)xPlayer.Functions.AddItem(g,h,j,i)end end;RemoveItem=function(b,g,h,i,j)if ESX then xPlayer=ESX.GetPlayerFromId(b)xPlayer.removeInventoryItem(g,h,i,j)else xPlayer=QBCore.Functions.GetPlayer(b)xPlayer.Functions.RemoveItem(g,h,j,i)end end;GetItem=function(b,...)if ESX then xPlayer=ESX.GetPlayerFromId(b)return xPlayer.getInventoryItem(...)else xPlayer=QBCore.Functions.GetPlayer(b)return xPlayer.Functions.GetItemByName(...)end end;HaveItem=function(b,...)local g=GetItem(b,...)if not g then return false end;if ESX then return g.count>0 else return g.amount>0 end end;HaveItemQuantity=function(b,g,k)local g=GetItem(b,g)if not g then return false end;if ESX then return g.count>k else return g.amount>k end end;AddMoney=function(b,type,...)if ESX then xPlayer=ESX.GetPlayerFromId(b)if type=="cash"then xPlayer.addMoney(...)else xPlayer.addAccountMoney(type,...)end else xPlayer=QBCore.Functions.GetPlayer(b)xPlayer.Functions.AddMoney(type,...)end end;RemoveMoney=function(b,type,...)if ESX then xPlayer=ESX.GetPlayerFromId(b)if type=="cash"then xPlayer.removeMoney(...)else xPlayer.removeAccountMoney(type,...)end else xPlayer=QBCore.Functions.GetPlayer(b)xPlayer.Functions.RemoveMoney(type,...)end end;HaveMoney=function(b,type,h)if ESX then xPlayer=ESX.GetPlayerFromId(b)if type=="cash"then return xPlayer.getMoney(type)>=h else return xPlayer.getAccount(type).money>=h end else xPlayer=QBCore.Functions.GetPlayer(b)return xPlayer.Functions.GetMoney(type)>=h end end;StartMySQL=function()MySQL={Async={},Sync={}}local function l(m)if nil==m then return{['']=''}end;assert(type(m)=="table","A table is expected")if next(m)==nil then return{['']=''}end;return m end;function MySQL.Sync.execute(n,m)assert(type(n)=="string"or type(n)=="number","The SQL Query must be a string")local o=0;local p=false;exports['mysql-async']:mysql_execute(n,l(m),function(q)o=q;p=true end)repeat Citizen.Wait(0)until p==true;return o end;function MySQL.Sync.fetchAll(n,m)assert(type(n)=="string"or type(n)=="number","The SQL Query must be a string")local o={}local p=false;exports['mysql-async']:mysql_fetch_all(n,l(m),function(q)o=q;p=true end)repeat Citizen.Wait(0)until p==true;return o end;function MySQL.Sync.fetchScalar(n,m)assert(type(n)=="string"or type(n)=="number","The SQL Query must be a string")local o=''local p=false;exports['mysql-async']:mysql_fetch_scalar(n,l(m),function(q)o=q;p=true end)repeat Citizen.Wait(0)until p==true;return o end;function MySQL.Sync.insert(n,m)assert(type(n)=="string"or type(n)=="number","The SQL Query must be a string")local o=0;local p=false;exports['mysql-async']:mysql_insert(n,l(m),function(q)o=q;p=true end)repeat Citizen.Wait(0)until p==true;return o end;function MySQL.Sync.store(n)assert(type(n)=="string","The SQL Query must be a string")local o=-1;local p=false;exports['mysql-async']:mysql_store(n,function(q)o=q;p=true end)repeat Citizen.Wait(0)until p==true;return o end;function MySQL.Sync.transaction(r,m)local o=0;local p=false;exports['mysql-async']:mysql_transaction(r,m,function(q)o=q;p=true end)repeat Citizen.Wait(0)until p==true;return o end;function MySQL.Async.execute(n,m,s)assert(type(n)=="string"or type(n)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_execute(n,l(m),s)end;function MySQL.Async.fetchAll(n,m,s)assert(type(n)=="string"or type(n)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_fetch_all(n,l(m),s)end;function MySQL.Async.fetchScalar(n,m,s)assert(type(n)=="string"or type(n)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_fetch_scalar(n,l(m),s)end;function MySQL.Async.insert(n,m,s)assert(type(n)=="string"or type(n)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_insert(n,l(m),s)end;function MySQL.Async.store(n,s)assert(type(n)=="string","The SQL Query must be a string")exports['mysql-async']:mysql_store(n,s)end;function MySQL.Async.transaction(r,m,s)return exports['mysql-async']:mysql_transaction(r,m,s)end;function MySQL.ready(t)Citizen.CreateThread(function()while GetResourceState('mysql-async')~='started'do Citizen.Wait(0)end;while not exports['mysql-async']:is_ready()do Citizen.Wait(0)end;t()end)end end;ExecuteSql=function(n,m)if MySQL==nil then StartMySQL()end;if string.find(n,"SELECT")then return MySQL.Sync.fetchAll(n,m)elseif string.find(n,"INSERT")or string.find(n,"UPDATE")then MySQL.Sync.execute(n,m)end end;SocietyAddItem=function(u,g,h)if not string.find(u,"society_")then u="society_"..u end;TriggerEvent('esx_addoninventory:getSharedInventory',u,function(v)v.addItem(g,h)end)end;SocietyRemoveItem=function(u,g,h)if not string.find(u,"society_")then u="society_"..u end;TriggerEvent('esx_addoninventory:getSharedInventory',u,function(v)v.removeItem(g,h)end)end;SocietyGetItem=function(u,g)if not string.find(u,"society_")then u="society_"..u end;local w=nil;TriggerEvent('esx_addoninventory:getSharedInventory',u,function(v)w=v.getItem(g)end)while w==nil do Citizen.Wait(1)end;return w end;SocietyHaveItem=function(u,g)if not string.find(u,"society_")then u="society_"..u end;local w=nil;TriggerEvent('esx_addoninventory:getSharedInventory',u,function(v)local x=v.getItem(g).count;w=x>0 end)while w==nil do Citizen.Wait(1)end;return w end;SocietyHaveItemQuantity=function(u,g,k)if not string.find(u,"society_")then u="society_"..u end;local w=nil;TriggerEvent('esx_addoninventory:getSharedInventory',u,function(v)local x=v.getItem(g).count;w=x>k end)while w==nil do Citizen.Wait(1)end;return w end;SocietyAddMoney=function(u,h)if not string.find(u,"society_")then u="society_"..u end;TriggerEvent('esx_addonaccount:getSharedAccount',u,function(y)y.addMoney(h)end)end;SocietyRemoveMoney=function(u,h)if not string.find(u,"society_")then u="society_"..u end;TriggerEvent('esx_addonaccount:getSharedAccount',u,function(y)y.removeMoney(h)end)end;SocietyHaveMoney=function(u,h)if not string.find(u,"society_")then u="society_"..u end;local z=nil;TriggerEvent('esx_addonaccount:getSharedAccount',u,function(y)z=y.money>=h end)while z==nil do Citizen.Wait(1)end;return z end;printd=function(A,B)if B then local C={}local function D(E,F)if C[tostring(E)]then print(F.."*"..tostring(E))else C[tostring(E)]=true;if type(E)=="table"then for G,H in pairs(E)do if type(H)=="table"then print(F.."["..G.."] => "..tostring(E).." {")D(H,F..string.rep(" ",string.len(G)+8))print(F..string.rep(" ",string.len(G)+6).."}")elseif type(H)=="string"then print(F.."["..G.."] => \""..H.."\"")else print(F.."["..G.."] => "..tostring(H))end end else print(F..tostring(E))end end end;if type(A)=="table"then print(tostring(A).." {")D(A,"  ")print("}")else developer("^1Error^0","error dumping table "..A.." why isnt a table","")end else if type(A)=="table"then print(json.encode(A,{indent=true}))else developer("^1Error^0","error dumping table "..A.." why isnt a table","")end end end;local I=string.gsub;string.multigsub=function(string,table,J)if type(table)then for K=1,#table do string=I(string,table[K],J[K])end else for K=1,#table do string=I(string,table[K],J)end end;return string end;table.fexist=function(A,L)return A[L]~=nil end;local M=table.remove;table.remove=function(A,N,O)if type(N)=="number"then return M(A,N)elseif type(N)=="string"then for P,Q in pairs(A)do if P==N then A[P]=nil;if O then return P end end end else return M(A)end end;table.empty=function(E)return next(E)==nil end;local R=function(E,P,Q)if type(P)=="number"then table.insert(E,Q)else E[P]=Q end end;table.merge=function(S,T)local q=table.clone(S)for P,Q in pairs(T)do R(q,P,Q)end;return q end;table.includes=function(E,U)if type(U)=="function"then for V,Q in pairs(E)do if U(Q)then return true end end else for V,Q in pairs(E)do if U==Q then return true end end end;return false end;table.filter=function(E,W)local q={}if type(W)=="function"then for P,Q in pairs(E)do if W(P,Q)then R(q,P,Q)end end elseif type(W)=="table"then for P,Q in pairs(E)do if table.includes(W,Q)then R(q,P,Q)end end end;return q end;table.find=function(E,U)if type(U)=="function"then for P,Q in pairs(E)do if U(Q)then return Q,P end end else for P,Q in pairs(E)do if U==Q then return Q,P end end end end;table.keys=function(E)local X={}for P,V in pairs(E)do table.insert(X,P)end;return X end;table.values=function(E)local Y={}for V,Q in pairs(E)do table.insert(Y,Q)end;return Y end;table.deepcopy=function(Z,_)if type(Z)~="table"then return Z end;_=_ or{}if _[Z]then return _[Z]end;local a0=table.clone(Z)_[Z]=a0;for P,Q in next,Z do if type(Q)=="table"then a0[P]=table.deepcopy(Q,_)end end;return a0 end;math.round=function(a1,a2)local V=10^a2;return math.floor(a1*V+0.5)/V end;math.lerp=function(a3,a4,a5)return a3+(a4-a3)*a5 end;math.invlerp=function(a3,a4,U)return(U-a3)/(a4-a3)end;GetDataForJob=function(a6)return exports["utility_lib"]:GetDataForJob(a6)end;quat2euler=function(a7)local a8=2*(a7.w*a7.x+a7.y*a7.z)local a9=1-2*(a7.x*a7.x+a7.y*a7.y)local aa=math.atan2(a8,a9)local ab=math.sqrt(1+2*(a7.w*a7.y-a7.x*a7.z))local ac=math.sqrt(1-2*(a7.w*a7.y-a7.x*a7.z))local ad=2*math.atan2(ab,ac)-math.pi/2;local ae=2*(a7.w*a7.z+a7.x*a7.y)local af=1-2*(a7.y*a7.y+a7.z*a7.z)local ag=math.atan2(ae,af)return vec3(math.deg(aa),math.deg(ad),math.deg(ag))end;GenerateMatrix=function(G,ah)local ai,aj,ak=math.rad(ah.x),math.rad(ah.y),math.rad(ah.z)local al,am=math.cos(ai),math.sin(ai)local an,ao=math.cos(aj),math.sin(aj)local ap,aq=math.cos(ak),math.sin(ak)local ar=mat3(vec3(1,0,0),vec3(0,al,-am),vec3(0,am,al))local as=mat3(vec3(an,0,ao),vec3(0,1,0),vec3(-ao,0,an))local at=mat3(vec3(ap,-aq,0),vec3(aq,ap,0),vec3(0,0,1))local au=ar*as*at;local av=mat4(vec4(au[1].x,au[2].x,au[3].x,0),vec4(au[1].y,au[2].y,au[3].y,0),vec4(au[1].z,au[2].z,au[3].z,0),vec4(G.x,G.y,G.z,1))return av end;GetOffsetFromPositionInWorldCoords=function(G,ah,aw)local ax=GenerateMatrix(G,ah)return ax*aw end;local ay=100.0;local az=8100;local aA=az/ay;function GetSliceColRowFromCoords(aB)local aC=math.floor(aB.x/ay)local aD=math.floor(aB.y/ay)return aD,aC end;function GetWorldCoordsFromSlice(aE)local aD=math.floor(aE/aA)local aC=aE%aA;return vec3(aC*ay,aD*ay,0.0)end;function GetSliceIdFromColRow(aD,aC)return math.floor(aD*aA+aC)end;function GetSliceFromCoords(G)local aD,aC=GetSliceColRowFromCoords(G)return GetSliceIdFromColRow(aD,aC)end;function GetSurroundingSlices(aE)local aF=aE-aA;local aG=aE+aA;local aH=aE-1;local aI=aE+1;local aJ=aE-aA-1;local aK=aE-aA+1;local aL=aE+aA-1;local aM=aE+aA+1;return{math.floor(aF),math.floor(aG),math.floor(aI),math.floor(aH),math.floor(aJ),math.floor(aK),math.floor(aL),math.floor(aM)}end;local aN={}UtilityNet={}UtilityNet.ForEachEntity=function(aO,aP)local aQ=UtilityNet.GetEntities(aP)local aR=0;if aQ then local aS,aT=next(aQ)while aS do local P,Q=next(aT)while P do aR=aR+1;local aU=aO(Q,P)if aU~=nil then return aU end;P,Q=next(aQ[aS],P)end;aS,aT=next(aQ,aS)end end end;UtilityNet.CreateEntity=function(aV,aB,aW)local aX=exports["utility_lib"]:CreateEntity(aV,aB,aW)table.insert(aN,aX)return aX end;UtilityNet.SetEntityModel=function(aY,aV)return exports["utility_lib"]:SetEntityModel(aY,aV)end;UtilityNet.DeleteEntity=function(aY)for P,Q in pairs(aN)do if Q==aY then table.remove(aN,P)break end end;return exports["utility_lib"]:DeleteEntity(aY)end;UtilityNet.AttachToEntity=function(aY,aZ,a_,G,ah,b0,b1,b2,b3)local m={boneServer=a_,pos=G,rot=ah,useSoftPinning=b0,collision=b1,rotationOrder=b2,syncRot=b3}m.isUtilityNet=true;return exports["utility_lib"]:AttachTo(aY,aZ,m)end;UtilityNet.AttachToNetId=function(aY,b4,b5,G,ah,b0,b1,b2,b3)local m={bone=b5,pos=G,rot=ah,useSoftPinning=b0,collision=b1,rotationOrder=b2,syncRot=b3}return exports["utility_lib"]:AttachTo(aY,b4,m)end;UtilityNet.DetachEntity=function(aY)return exports["utility_lib"]:DetachEntity(aY)end;UtilityNet.InternalFindFromNetId=function(aY)return exports["utility_lib"]:InternalFindFromNetId(aY)end;UtilityNet.DoesUNetIdExist=function(aY)local b6=UtilityNet.InternalFindFromNetId(aY)return b6~=nil end;UtilityNet.GetEntityCoords=function(aY)local b6=UtilityNet.InternalFindFromNetId(aY)if b6 then return b6.coords end end;UtilityNet.GetEntityRotation=function(aY)local b6=UtilityNet.InternalFindFromNetId(aY)if b6 then return b6.options.rotation end end;UtilityNet.GetEntityModel=function(aY)local b6=UtilityNet.InternalFindFromNetId(aY)if b6 then return b6.model end end;UtilityNet.GetEntities=function(aP)return exports["utility_lib"]:GetEntities(aP)end;UtilityNet.SetModelRenderDistance=function(aV,b7)return exports["utility_lib"]:SetModelRenderDistance(aV,b7)end;UtilityNet.SetEntityCoords=function(aY,b8,b9)return exports["utility_lib"]:SetEntityCoords(aY,b8,b9)end;UtilityNet.SetEntityRotation=function(aY,ba,bb)return exports["utility_lib"]:SetEntityRotation(aY,ba,bb)end;UtilityNet.DetachEntity=function(aY)TriggerEvent("Utility:Net:DetachEntity",aY)end;local bc=nil;bc=function(aX,bd,be)be=be or{}local bf=function()local bg=exports["utility_lib"]:GetEntityStateValue(aX,bd)for P,Q in pairs(be)do bg=bg[Q]end;return bg end;return setmetatable({__internal_statetable=true,raw=function(self)return bf()end},{__pairs=function(self)return pairs(bf())end,__ipairs=function(self)return ipairs(bf())end,__len=function(self)return#bf()end,__index=function(V,P)local bh=bf()if type(bh[P])=="table"then local bi=table.clone(be)table.insert(bi,P)return bc(aX,bd,bi)else return bh[P]end end,__newindex=function(V,P,Q)local bg=exports["utility_lib"]:GetEntityStateValue(aX,bd)local bh=bg;for P,Q in pairs(be)do bh=bh[Q]end;bh[P]=Q;exports["utility_lib"]:SetEntityStateValue(aX,bd,bg)end})end;UtilityNet.AddStateBagChangeHandler=function(aY,s)return AddEventHandler("Utility:Net:UpdateStateValue",function(bj,bk,U)if aY==bj then s(bk,U)end end)end;UtilityNet.RemoveStateBagChangeHandler=function(bl)if bl and bl.key and bl.name then RemoveEventHandler(bl)end end;UtilityNet.State=function(aX)if not aX then error("UtilityNet.State: id is required, got nil",2)end;local bm=setmetatable({raw=function(self)return exports["utility_lib"]:GetEntityStateValue(aX)end},{__index=function(V,P)local U=exports["utility_lib"]:GetEntityStateValue(aX,P)if type(U)=="table"then return bc(aX,P,{})else return U end end,__newindex=function(V,P,Q)if type(Q)=="table"and Q.__internal_statetable then Q=Q:raw()end;exports["utility_lib"]:SetEntityStateValue(aX,P,Q)end})return bm end;AddEventHandler("onResourceStop",function(bn)if bn==GetCurrentResourceName()then for P,Q in pairs(aN)do exports["utility_lib"]:DeleteEntity(Q)end end end)